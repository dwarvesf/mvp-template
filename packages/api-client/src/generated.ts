/* eslint-disable */
/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * MVP Template API
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import { axiosInstance } from './axios';
export interface RegisterDto {
  /** User email address */
  email: string;
  /**
   * User password (minimum 8 characters)
   * @minLength 8
   */
  password: string;
  /** User full name */
  name?: string;
  /** Optional invitation token */
  invitationToken?: string;
}

export interface LoginDto {
  /** User email address */
  email: string;
  /** User password */
  password: string;
}

export interface ForgotPasswordDto {
  email: string;
}

export interface ResetPasswordDto {
  token: string;
  newPassword: string;
}

/**
 * Organization settings
 */
export type CreateOrganizationDtoSettings = { [key: string]: unknown };

export interface CreateOrganizationDto {
  /** Organization name */
  name: string;
  /** Organization URL slug */
  slug?: string;
  /** Organization settings */
  settings?: CreateOrganizationDtoSettings;
}

/**
 * Organization settings
 */
export type UpdateOrganizationDtoSettings = { [key: string]: unknown };

export interface UpdateOrganizationDto {
  /** Organization name */
  name?: string;
  /** Organization settings */
  settings?: UpdateOrganizationDtoSettings;
}

export interface TransferOwnershipDto {
  /** New owner user ID */
  newOwnerId: string;
}

export interface UpdateMemberRoleDto {
  /** New role ID */
  roleId: string;
}

export interface InviteMemberDto {
  /** Email address to invite */
  email: string;
  /** Role ID to assign */
  roleId: string;
}

export const appControllerGetHello = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/`, method: 'GET', ...(signal ? { signal }: {})
    },
      );
    }
  

export const getAppControllerGetHelloQueryKey = () => {
    return [`/`] as const;
    }

    
export const getAppControllerGetHelloQueryOptions = <TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof appControllerGetHello>>> = ({ signal }) => appControllerGetHello(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AppControllerGetHelloQueryResult = NonNullable<Awaited<ReturnType<typeof appControllerGetHello>>>
export type AppControllerGetHelloQueryError = unknown


export function useAppControllerGetHello<TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHello>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHello>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAppControllerGetHello<TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof appControllerGetHello>>,
          TError,
          Awaited<ReturnType<typeof appControllerGetHello>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAppControllerGetHello<TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useAppControllerGetHello<TData = Awaited<ReturnType<typeof appControllerGetHello>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof appControllerGetHello>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAppControllerGetHelloQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




export const authControllerRegister = (
    registerDto: RegisterDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: registerDto, ...(signal ? { signal }: {})
    },
      );
    }
  


export const getAuthControllerRegisterMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: RegisterDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: RegisterDto}, TContext> => {

const mutationKey = ['authControllerRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerRegister>>, {data: RegisterDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerRegister>>>
    export type AuthControllerRegisterMutationBody = RegisterDto
    export type AuthControllerRegisterMutationError = unknown

    export const useAuthControllerRegister = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerRegister>>, TError,{data: RegisterDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authControllerRegister>>,
        TError,
        {data: RegisterDto},
        TContext
      > => {

      const mutationOptions = getAuthControllerRegisterMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const authControllerLogin = (
    loginDto: LoginDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginDto, ...(signal ? { signal }: {})
    },
      );
    }
  


export const getAuthControllerLoginMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext> => {

const mutationKey = ['authControllerLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerLogin>>, {data: LoginDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerLoginMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerLogin>>>
    export type AuthControllerLoginMutationBody = LoginDto
    export type AuthControllerLoginMutationError = unknown

    export const useAuthControllerLogin = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerLogin>>, TError,{data: LoginDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authControllerLogin>>,
        TError,
        {data: LoginDto},
        TContext
      > => {

      const mutationOptions = getAuthControllerLoginMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const authControllerForgotPassword = (
    forgotPasswordDto: ForgotPasswordDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/auth/forgot-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: forgotPasswordDto, ...(signal ? { signal }: {})
    },
      );
    }
  


export const getAuthControllerForgotPasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerForgotPassword>>, TError,{data: ForgotPasswordDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerForgotPassword>>, TError,{data: ForgotPasswordDto}, TContext> => {

const mutationKey = ['authControllerForgotPassword'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerForgotPassword>>, {data: ForgotPasswordDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerForgotPassword(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerForgotPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerForgotPassword>>>
    export type AuthControllerForgotPasswordMutationBody = ForgotPasswordDto
    export type AuthControllerForgotPasswordMutationError = unknown

    export const useAuthControllerForgotPassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerForgotPassword>>, TError,{data: ForgotPasswordDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authControllerForgotPassword>>,
        TError,
        {data: ForgotPasswordDto},
        TContext
      > => {

      const mutationOptions = getAuthControllerForgotPasswordMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const authControllerResetPassword = (
    resetPasswordDto: ResetPasswordDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/auth/reset-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resetPasswordDto, ...(signal ? { signal }: {})
    },
      );
    }
  


export const getAuthControllerResetPasswordMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerResetPassword>>, TError,{data: ResetPasswordDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof authControllerResetPassword>>, TError,{data: ResetPasswordDto}, TContext> => {

const mutationKey = ['authControllerResetPassword'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof authControllerResetPassword>>, {data: ResetPasswordDto}> = (props) => {
          const {data} = props ?? {};

          return  authControllerResetPassword(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AuthControllerResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof authControllerResetPassword>>>
    export type AuthControllerResetPasswordMutationBody = ResetPasswordDto
    export type AuthControllerResetPasswordMutationError = unknown

    export const useAuthControllerResetPassword = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof authControllerResetPassword>>, TError,{data: ResetPasswordDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof authControllerResetPassword>>,
        TError,
        {data: ResetPasswordDto},
        TContext
      > => {

      const mutationOptions = getAuthControllerResetPasswordMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
export const authControllerGetMe = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/auth/me`, method: 'GET', ...(signal ? { signal }: {})
    },
      );
    }
  

export const getAuthControllerGetMeQueryKey = () => {
    return [`/auth/me`] as const;
    }

    
export const getAuthControllerGetMeQueryOptions = <TData = Awaited<ReturnType<typeof authControllerGetMe>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerGetMe>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getAuthControllerGetMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof authControllerGetMe>>> = ({ signal }) => authControllerGetMe(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof authControllerGetMe>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AuthControllerGetMeQueryResult = NonNullable<Awaited<ReturnType<typeof authControllerGetMe>>>
export type AuthControllerGetMeQueryError = unknown


export function useAuthControllerGetMe<TData = Awaited<ReturnType<typeof authControllerGetMe>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerGetMe>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGetMe>>,
          TError,
          Awaited<ReturnType<typeof authControllerGetMe>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthControllerGetMe<TData = Awaited<ReturnType<typeof authControllerGetMe>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerGetMe>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof authControllerGetMe>>,
          TError,
          Awaited<ReturnType<typeof authControllerGetMe>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAuthControllerGetMe<TData = Awaited<ReturnType<typeof authControllerGetMe>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerGetMe>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useAuthControllerGetMe<TData = Awaited<ReturnType<typeof authControllerGetMe>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof authControllerGetMe>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getAuthControllerGetMeQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create a new organization
 */
export const organizationsControllerCreateOrganization = (
    createOrganizationDto: CreateOrganizationDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/organizations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createOrganizationDto, ...(signal ? { signal }: {})
    },
      );
    }
  


export const getOrganizationsControllerCreateOrganizationMutationOptions = <TError = null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof organizationsControllerCreateOrganization>>, TError,{data: CreateOrganizationDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof organizationsControllerCreateOrganization>>, TError,{data: CreateOrganizationDto}, TContext> => {

const mutationKey = ['organizationsControllerCreateOrganization'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof organizationsControllerCreateOrganization>>, {data: CreateOrganizationDto}> = (props) => {
          const {data} = props ?? {};

          return  organizationsControllerCreateOrganization(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrganizationsControllerCreateOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof organizationsControllerCreateOrganization>>>
    export type OrganizationsControllerCreateOrganizationMutationBody = CreateOrganizationDto
    export type OrganizationsControllerCreateOrganizationMutationError = null

    /**
 * @summary Create a new organization
 */
export const useOrganizationsControllerCreateOrganization = <TError = null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof organizationsControllerCreateOrganization>>, TError,{data: CreateOrganizationDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof organizationsControllerCreateOrganization>>,
        TError,
        {data: CreateOrganizationDto},
        TContext
      > => {

      const mutationOptions = getOrganizationsControllerCreateOrganizationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Get user organizations
 */
export const organizationsControllerGetUserOrganizations = (
    
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/organizations`, method: 'GET', ...(signal ? { signal }: {})
    },
      );
    }
  

export const getOrganizationsControllerGetUserOrganizationsQueryKey = () => {
    return [`/organizations`] as const;
    }

    
export const getOrganizationsControllerGetUserOrganizationsQueryOptions = <TData = Awaited<ReturnType<typeof organizationsControllerGetUserOrganizations>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsControllerGetUserOrganizations>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrganizationsControllerGetUserOrganizationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationsControllerGetUserOrganizations>>> = ({ signal }) => organizationsControllerGetUserOrganizations(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof organizationsControllerGetUserOrganizations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type OrganizationsControllerGetUserOrganizationsQueryResult = NonNullable<Awaited<ReturnType<typeof organizationsControllerGetUserOrganizations>>>
export type OrganizationsControllerGetUserOrganizationsQueryError = unknown


export function useOrganizationsControllerGetUserOrganizations<TData = Awaited<ReturnType<typeof organizationsControllerGetUserOrganizations>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsControllerGetUserOrganizations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof organizationsControllerGetUserOrganizations>>,
          TError,
          Awaited<ReturnType<typeof organizationsControllerGetUserOrganizations>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOrganizationsControllerGetUserOrganizations<TData = Awaited<ReturnType<typeof organizationsControllerGetUserOrganizations>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsControllerGetUserOrganizations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof organizationsControllerGetUserOrganizations>>,
          TError,
          Awaited<ReturnType<typeof organizationsControllerGetUserOrganizations>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOrganizationsControllerGetUserOrganizations<TData = Awaited<ReturnType<typeof organizationsControllerGetUserOrganizations>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsControllerGetUserOrganizations>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get user organizations
 */

export function useOrganizationsControllerGetUserOrganizations<TData = Awaited<ReturnType<typeof organizationsControllerGetUserOrganizations>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsControllerGetUserOrganizations>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getOrganizationsControllerGetUserOrganizationsQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get organization details
 */
export const organizationsControllerGetOrganization = (
    orgId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/organizations/${orgId}`, method: 'GET', ...(signal ? { signal }: {})
    },
      );
    }
  

export const getOrganizationsControllerGetOrganizationQueryKey = (orgId?: string,) => {
    return [`/organizations/${orgId}`] as const;
    }

    
export const getOrganizationsControllerGetOrganizationQueryOptions = <TData = Awaited<ReturnType<typeof organizationsControllerGetOrganization>>, TError = null | null>(orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsControllerGetOrganization>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getOrganizationsControllerGetOrganizationQueryKey(orgId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof organizationsControllerGetOrganization>>> = ({ signal }) => organizationsControllerGetOrganization(orgId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orgId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof organizationsControllerGetOrganization>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type OrganizationsControllerGetOrganizationQueryResult = NonNullable<Awaited<ReturnType<typeof organizationsControllerGetOrganization>>>
export type OrganizationsControllerGetOrganizationQueryError = null | null


export function useOrganizationsControllerGetOrganization<TData = Awaited<ReturnType<typeof organizationsControllerGetOrganization>>, TError = null | null>(
 orgId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsControllerGetOrganization>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof organizationsControllerGetOrganization>>,
          TError,
          Awaited<ReturnType<typeof organizationsControllerGetOrganization>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOrganizationsControllerGetOrganization<TData = Awaited<ReturnType<typeof organizationsControllerGetOrganization>>, TError = null | null>(
 orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsControllerGetOrganization>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof organizationsControllerGetOrganization>>,
          TError,
          Awaited<ReturnType<typeof organizationsControllerGetOrganization>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useOrganizationsControllerGetOrganization<TData = Awaited<ReturnType<typeof organizationsControllerGetOrganization>>, TError = null | null>(
 orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsControllerGetOrganization>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get organization details
 */

export function useOrganizationsControllerGetOrganization<TData = Awaited<ReturnType<typeof organizationsControllerGetOrganization>>, TError = null | null>(
 orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof organizationsControllerGetOrganization>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getOrganizationsControllerGetOrganizationQueryOptions(orgId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update organization
 */
export const organizationsControllerUpdateOrganization = (
    orgId: string,
    updateOrganizationDto: UpdateOrganizationDto,
 ) => {
      
      
      return axiosInstance<null>(
      {url: `/organizations/${orgId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateOrganizationDto
    },
      );
    }
  


export const getOrganizationsControllerUpdateOrganizationMutationOptions = <TError = null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof organizationsControllerUpdateOrganization>>, TError,{orgId: string;data: UpdateOrganizationDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof organizationsControllerUpdateOrganization>>, TError,{orgId: string;data: UpdateOrganizationDto}, TContext> => {

const mutationKey = ['organizationsControllerUpdateOrganization'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof organizationsControllerUpdateOrganization>>, {orgId: string;data: UpdateOrganizationDto}> = (props) => {
          const {orgId,data} = props ?? {};

          return  organizationsControllerUpdateOrganization(orgId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrganizationsControllerUpdateOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof organizationsControllerUpdateOrganization>>>
    export type OrganizationsControllerUpdateOrganizationMutationBody = UpdateOrganizationDto
    export type OrganizationsControllerUpdateOrganizationMutationError = null

    /**
 * @summary Update organization
 */
export const useOrganizationsControllerUpdateOrganization = <TError = null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof organizationsControllerUpdateOrganization>>, TError,{orgId: string;data: UpdateOrganizationDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof organizationsControllerUpdateOrganization>>,
        TError,
        {orgId: string;data: UpdateOrganizationDto},
        TContext
      > => {

      const mutationOptions = getOrganizationsControllerUpdateOrganizationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Delete organization
 */
export const organizationsControllerDeleteOrganization = (
    orgId: string,
 ) => {
      
      
      return axiosInstance<null>(
      {url: `/organizations/${orgId}`, method: 'DELETE'
    },
      );
    }
  


export const getOrganizationsControllerDeleteOrganizationMutationOptions = <TError = null | null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof organizationsControllerDeleteOrganization>>, TError,{orgId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof organizationsControllerDeleteOrganization>>, TError,{orgId: string}, TContext> => {

const mutationKey = ['organizationsControllerDeleteOrganization'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof organizationsControllerDeleteOrganization>>, {orgId: string}> = (props) => {
          const {orgId} = props ?? {};

          return  organizationsControllerDeleteOrganization(orgId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrganizationsControllerDeleteOrganizationMutationResult = NonNullable<Awaited<ReturnType<typeof organizationsControllerDeleteOrganization>>>
    
    export type OrganizationsControllerDeleteOrganizationMutationError = null | null

    /**
 * @summary Delete organization
 */
export const useOrganizationsControllerDeleteOrganization = <TError = null | null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof organizationsControllerDeleteOrganization>>, TError,{orgId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof organizationsControllerDeleteOrganization>>,
        TError,
        {orgId: string},
        TContext
      > => {

      const mutationOptions = getOrganizationsControllerDeleteOrganizationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Transfer organization ownership
 */
export const organizationsControllerTransferOwnership = (
    orgId: string,
    transferOwnershipDto: TransferOwnershipDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/organizations/${orgId}/transfer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: transferOwnershipDto, ...(signal ? { signal }: {})
    },
      );
    }
  


export const getOrganizationsControllerTransferOwnershipMutationOptions = <TError = null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof organizationsControllerTransferOwnership>>, TError,{orgId: string;data: TransferOwnershipDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof organizationsControllerTransferOwnership>>, TError,{orgId: string;data: TransferOwnershipDto}, TContext> => {

const mutationKey = ['organizationsControllerTransferOwnership'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof organizationsControllerTransferOwnership>>, {orgId: string;data: TransferOwnershipDto}> = (props) => {
          const {orgId,data} = props ?? {};

          return  organizationsControllerTransferOwnership(orgId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type OrganizationsControllerTransferOwnershipMutationResult = NonNullable<Awaited<ReturnType<typeof organizationsControllerTransferOwnership>>>
    export type OrganizationsControllerTransferOwnershipMutationBody = TransferOwnershipDto
    export type OrganizationsControllerTransferOwnershipMutationError = null

    /**
 * @summary Transfer organization ownership
 */
export const useOrganizationsControllerTransferOwnership = <TError = null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof organizationsControllerTransferOwnership>>, TError,{orgId: string;data: TransferOwnershipDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof organizationsControllerTransferOwnership>>,
        TError,
        {orgId: string;data: TransferOwnershipDto},
        TContext
      > => {

      const mutationOptions = getOrganizationsControllerTransferOwnershipMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Get organization members
 */
export const membersControllerGetMembers = (
    orgId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/organizations/${orgId}/members`, method: 'GET', ...(signal ? { signal }: {})
    },
      );
    }
  

export const getMembersControllerGetMembersQueryKey = (orgId?: string,) => {
    return [`/organizations/${orgId}/members`] as const;
    }

    
export const getMembersControllerGetMembersQueryOptions = <TData = Awaited<ReturnType<typeof membersControllerGetMembers>>, TError = unknown>(orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof membersControllerGetMembers>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMembersControllerGetMembersQueryKey(orgId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof membersControllerGetMembers>>> = ({ signal }) => membersControllerGetMembers(orgId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orgId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof membersControllerGetMembers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type MembersControllerGetMembersQueryResult = NonNullable<Awaited<ReturnType<typeof membersControllerGetMembers>>>
export type MembersControllerGetMembersQueryError = unknown


export function useMembersControllerGetMembers<TData = Awaited<ReturnType<typeof membersControllerGetMembers>>, TError = unknown>(
 orgId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof membersControllerGetMembers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof membersControllerGetMembers>>,
          TError,
          Awaited<ReturnType<typeof membersControllerGetMembers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMembersControllerGetMembers<TData = Awaited<ReturnType<typeof membersControllerGetMembers>>, TError = unknown>(
 orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof membersControllerGetMembers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof membersControllerGetMembers>>,
          TError,
          Awaited<ReturnType<typeof membersControllerGetMembers>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useMembersControllerGetMembers<TData = Awaited<ReturnType<typeof membersControllerGetMembers>>, TError = unknown>(
 orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof membersControllerGetMembers>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get organization members
 */

export function useMembersControllerGetMembers<TData = Awaited<ReturnType<typeof membersControllerGetMembers>>, TError = unknown>(
 orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof membersControllerGetMembers>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getMembersControllerGetMembersQueryOptions(orgId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update member role
 */
export const membersControllerUpdateMemberRole = (
    orgId: string,
    userId: string,
    updateMemberRoleDto: UpdateMemberRoleDto,
 ) => {
      
      
      return axiosInstance<null>(
      {url: `/organizations/${orgId}/members/${userId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateMemberRoleDto
    },
      );
    }
  


export const getMembersControllerUpdateMemberRoleMutationOptions = <TError = null | null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof membersControllerUpdateMemberRole>>, TError,{orgId: string;userId: string;data: UpdateMemberRoleDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof membersControllerUpdateMemberRole>>, TError,{orgId: string;userId: string;data: UpdateMemberRoleDto}, TContext> => {

const mutationKey = ['membersControllerUpdateMemberRole'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof membersControllerUpdateMemberRole>>, {orgId: string;userId: string;data: UpdateMemberRoleDto}> = (props) => {
          const {orgId,userId,data} = props ?? {};

          return  membersControllerUpdateMemberRole(orgId,userId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MembersControllerUpdateMemberRoleMutationResult = NonNullable<Awaited<ReturnType<typeof membersControllerUpdateMemberRole>>>
    export type MembersControllerUpdateMemberRoleMutationBody = UpdateMemberRoleDto
    export type MembersControllerUpdateMemberRoleMutationError = null | null

    /**
 * @summary Update member role
 */
export const useMembersControllerUpdateMemberRole = <TError = null | null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof membersControllerUpdateMemberRole>>, TError,{orgId: string;userId: string;data: UpdateMemberRoleDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof membersControllerUpdateMemberRole>>,
        TError,
        {orgId: string;userId: string;data: UpdateMemberRoleDto},
        TContext
      > => {

      const mutationOptions = getMembersControllerUpdateMemberRoleMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Remove member from organization
 */
export const membersControllerRemoveMember = (
    orgId: string,
    userId: string,
 ) => {
      
      
      return axiosInstance<null>(
      {url: `/organizations/${orgId}/members/${userId}`, method: 'DELETE'
    },
      );
    }
  


export const getMembersControllerRemoveMemberMutationOptions = <TError = null | null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof membersControllerRemoveMember>>, TError,{orgId: string;userId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof membersControllerRemoveMember>>, TError,{orgId: string;userId: string}, TContext> => {

const mutationKey = ['membersControllerRemoveMember'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof membersControllerRemoveMember>>, {orgId: string;userId: string}> = (props) => {
          const {orgId,userId} = props ?? {};

          return  membersControllerRemoveMember(orgId,userId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MembersControllerRemoveMemberMutationResult = NonNullable<Awaited<ReturnType<typeof membersControllerRemoveMember>>>
    
    export type MembersControllerRemoveMemberMutationError = null | null

    /**
 * @summary Remove member from organization
 */
export const useMembersControllerRemoveMember = <TError = null | null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof membersControllerRemoveMember>>, TError,{orgId: string;userId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof membersControllerRemoveMember>>,
        TError,
        {orgId: string;userId: string},
        TContext
      > => {

      const mutationOptions = getMembersControllerRemoveMemberMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Create organization invitation
 */
export const invitationsControllerCreateInvitation = (
    orgId: string,
    inviteMemberDto: InviteMemberDto,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/organizations/${orgId}/invitations`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: inviteMemberDto, ...(signal ? { signal }: {})
    },
      );
    }
  


export const getInvitationsControllerCreateInvitationMutationOptions = <TError = null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof invitationsControllerCreateInvitation>>, TError,{orgId: string;data: InviteMemberDto}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof invitationsControllerCreateInvitation>>, TError,{orgId: string;data: InviteMemberDto}, TContext> => {

const mutationKey = ['invitationsControllerCreateInvitation'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof invitationsControllerCreateInvitation>>, {orgId: string;data: InviteMemberDto}> = (props) => {
          const {orgId,data} = props ?? {};

          return  invitationsControllerCreateInvitation(orgId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type InvitationsControllerCreateInvitationMutationResult = NonNullable<Awaited<ReturnType<typeof invitationsControllerCreateInvitation>>>
    export type InvitationsControllerCreateInvitationMutationBody = InviteMemberDto
    export type InvitationsControllerCreateInvitationMutationError = null

    /**
 * @summary Create organization invitation
 */
export const useInvitationsControllerCreateInvitation = <TError = null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof invitationsControllerCreateInvitation>>, TError,{orgId: string;data: InviteMemberDto}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof invitationsControllerCreateInvitation>>,
        TError,
        {orgId: string;data: InviteMemberDto},
        TContext
      > => {

      const mutationOptions = getInvitationsControllerCreateInvitationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Get organization invitations
 */
export const invitationsControllerGetInvitations = (
    orgId: string,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/organizations/${orgId}/invitations`, method: 'GET', ...(signal ? { signal }: {})
    },
      );
    }
  

export const getInvitationsControllerGetInvitationsQueryKey = (orgId?: string,) => {
    return [`/organizations/${orgId}/invitations`] as const;
    }

    
export const getInvitationsControllerGetInvitationsQueryOptions = <TData = Awaited<ReturnType<typeof invitationsControllerGetInvitations>>, TError = unknown>(orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof invitationsControllerGetInvitations>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getInvitationsControllerGetInvitationsQueryKey(orgId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof invitationsControllerGetInvitations>>> = ({ signal }) => invitationsControllerGetInvitations(orgId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orgId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof invitationsControllerGetInvitations>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type InvitationsControllerGetInvitationsQueryResult = NonNullable<Awaited<ReturnType<typeof invitationsControllerGetInvitations>>>
export type InvitationsControllerGetInvitationsQueryError = unknown


export function useInvitationsControllerGetInvitations<TData = Awaited<ReturnType<typeof invitationsControllerGetInvitations>>, TError = unknown>(
 orgId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof invitationsControllerGetInvitations>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof invitationsControllerGetInvitations>>,
          TError,
          Awaited<ReturnType<typeof invitationsControllerGetInvitations>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useInvitationsControllerGetInvitations<TData = Awaited<ReturnType<typeof invitationsControllerGetInvitations>>, TError = unknown>(
 orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof invitationsControllerGetInvitations>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof invitationsControllerGetInvitations>>,
          TError,
          Awaited<ReturnType<typeof invitationsControllerGetInvitations>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useInvitationsControllerGetInvitations<TData = Awaited<ReturnType<typeof invitationsControllerGetInvitations>>, TError = unknown>(
 orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof invitationsControllerGetInvitations>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get organization invitations
 */

export function useInvitationsControllerGetInvitations<TData = Awaited<ReturnType<typeof invitationsControllerGetInvitations>>, TError = unknown>(
 orgId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof invitationsControllerGetInvitations>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getInvitationsControllerGetInvitationsQueryOptions(orgId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Revoke invitation
 */
export const invitationsControllerRevokeInvitation = (
    orgId: string,
    invitationId: string,
 ) => {
      
      
      return axiosInstance<null>(
      {url: `/organizations/${orgId}/invitations/${invitationId}`, method: 'DELETE'
    },
      );
    }
  


export const getInvitationsControllerRevokeInvitationMutationOptions = <TError = null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof invitationsControllerRevokeInvitation>>, TError,{orgId: string;invitationId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof invitationsControllerRevokeInvitation>>, TError,{orgId: string;invitationId: string}, TContext> => {

const mutationKey = ['invitationsControllerRevokeInvitation'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof invitationsControllerRevokeInvitation>>, {orgId: string;invitationId: string}> = (props) => {
          const {orgId,invitationId} = props ?? {};

          return  invitationsControllerRevokeInvitation(orgId,invitationId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type InvitationsControllerRevokeInvitationMutationResult = NonNullable<Awaited<ReturnType<typeof invitationsControllerRevokeInvitation>>>
    
    export type InvitationsControllerRevokeInvitationMutationError = null

    /**
 * @summary Revoke invitation
 */
export const useInvitationsControllerRevokeInvitation = <TError = null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof invitationsControllerRevokeInvitation>>, TError,{orgId: string;invitationId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof invitationsControllerRevokeInvitation>>,
        TError,
        {orgId: string;invitationId: string},
        TContext
      > => {

      const mutationOptions = getInvitationsControllerRevokeInvitationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Get invitation details by token
 */
export const publicInvitationsControllerGetInvitation = (
    token: string,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/invitations/${token}`, method: 'GET', ...(signal ? { signal }: {})
    },
      );
    }
  

export const getPublicInvitationsControllerGetInvitationQueryKey = (token?: string,) => {
    return [`/invitations/${token}`] as const;
    }

    
export const getPublicInvitationsControllerGetInvitationQueryOptions = <TData = Awaited<ReturnType<typeof publicInvitationsControllerGetInvitation>>, TError = null | null>(token: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicInvitationsControllerGetInvitation>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getPublicInvitationsControllerGetInvitationQueryKey(token);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof publicInvitationsControllerGetInvitation>>> = ({ signal }) => publicInvitationsControllerGetInvitation(token, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(token), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof publicInvitationsControllerGetInvitation>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PublicInvitationsControllerGetInvitationQueryResult = NonNullable<Awaited<ReturnType<typeof publicInvitationsControllerGetInvitation>>>
export type PublicInvitationsControllerGetInvitationQueryError = null | null


export function usePublicInvitationsControllerGetInvitation<TData = Awaited<ReturnType<typeof publicInvitationsControllerGetInvitation>>, TError = null | null>(
 token: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicInvitationsControllerGetInvitation>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof publicInvitationsControllerGetInvitation>>,
          TError,
          Awaited<ReturnType<typeof publicInvitationsControllerGetInvitation>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePublicInvitationsControllerGetInvitation<TData = Awaited<ReturnType<typeof publicInvitationsControllerGetInvitation>>, TError = null | null>(
 token: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicInvitationsControllerGetInvitation>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof publicInvitationsControllerGetInvitation>>,
          TError,
          Awaited<ReturnType<typeof publicInvitationsControllerGetInvitation>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePublicInvitationsControllerGetInvitation<TData = Awaited<ReturnType<typeof publicInvitationsControllerGetInvitation>>, TError = null | null>(
 token: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicInvitationsControllerGetInvitation>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get invitation details by token
 */

export function usePublicInvitationsControllerGetInvitation<TData = Awaited<ReturnType<typeof publicInvitationsControllerGetInvitation>>, TError = null | null>(
 token: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof publicInvitationsControllerGetInvitation>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getPublicInvitationsControllerGetInvitationQueryOptions(token,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Accept invitation
 */
export const publicInvitationsControllerAcceptInvitation = (
    token: string,
 signal?: AbortSignal
) => {
      
      
      return axiosInstance<null>(
      {url: `/invitations/${token}/accept`, method: 'POST', ...(signal ? { signal }: {})
    },
      );
    }
  


export const getPublicInvitationsControllerAcceptInvitationMutationOptions = <TError = null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicInvitationsControllerAcceptInvitation>>, TError,{token: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof publicInvitationsControllerAcceptInvitation>>, TError,{token: string}, TContext> => {

const mutationKey = ['publicInvitationsControllerAcceptInvitation'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof publicInvitationsControllerAcceptInvitation>>, {token: string}> = (props) => {
          const {token} = props ?? {};

          return  publicInvitationsControllerAcceptInvitation(token,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PublicInvitationsControllerAcceptInvitationMutationResult = NonNullable<Awaited<ReturnType<typeof publicInvitationsControllerAcceptInvitation>>>
    
    export type PublicInvitationsControllerAcceptInvitationMutationError = null

    /**
 * @summary Accept invitation
 */
export const usePublicInvitationsControllerAcceptInvitation = <TError = null,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof publicInvitationsControllerAcceptInvitation>>, TError,{token: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof publicInvitationsControllerAcceptInvitation>>,
        TError,
        {token: string},
        TContext
      > => {

      const mutationOptions = getPublicInvitationsControllerAcceptInvitationMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
